From a201d933d328124ba1928b935e84aa2113c4377c Mon Sep 17 00:00:00 2001
From: Marlon Beijer <marlon@eevul.org>
Date: Tue, 24 Sep 2024 21:22:55 +0200
Subject: [PATCH 41/41] Fix extend.texi

---
 gcc/doc/extend.texi | 204 ++------------------------------------------
 1 file changed, 6 insertions(+), 198 deletions(-)

diff --git a/gcc/doc/extend.texi b/gcc/doc/extend.texi
index 11b9555628735dccb8db88e5a4ee3c415cbf0ae4..209341f523d010da19ac1e2655570ba52b14bda3 100644
--- a/gcc/doc/extend.texi
+++ b/gcc/doc/extend.texi
@@ -685,13 +685,13 @@ myprintf (FILE *f, const char *format, ...)
     return s;
   return r + s;
 @}
 @end smallexample
 @end deftypefn
 
-@deftypefn {Built-in Function} {size_t} __builtin_va_arg_pack_len ()
+@deftypefn {Built-in Function} {int} __builtin_va_arg_pack_len ()
 This built-in function returns the number of anonymous arguments of
 an inline function.  It can be used only in inline functions that
 are always inlined, never compiled as a separate function, such
 as those using @code{__attribute__ ((__always_inline__))} or
 @code{__attribute__ ((__gnu_inline__))} extern inline functions.
 For example following does link- or run-time checking of open
@@ -2484,13 +2484,13 @@ GCC plugins may provide their own attributes.
 
 The following attributes are supported on most targets.
 
 @table @code
 @c Keep this table alphabetized by attribute name.  Treat _ as space.
 
-@itemx access (@var{access-mode}, @var{ref-index})
+@item access (@var{access-mode}, @var{ref-index})
 @itemx access (@var{access-mode}, @var{ref-index}, @var{size-index})
 
 The @code{access} attribute enables the detection of invalid or unsafe
 accesses by functions to which they apply or their callers, as well as
 write-only accesses to objects that are never read from.  Such accesses
 may be diagnosed by warnings such as @option{-Wstringop-overflow},
@@ -4060,176 +4060,12 @@ int foo ()
 @}
 @end smallexample
 
 @noindent
 results in warning on line 5.
 
-
-@item libcall
-@cindex AmigaOS specific function attributes
-On AmigaOS, the @code{libcall} attribute is used to declare function
-pointers in an AmigaOS @emph{Interface}.  When such a function pointer
-is invoked, a pointer to the Interface itself is passed as a hidden
-first argument, similar to @code{this} in C++.
-
-ISO/IEC 9899:1999 Edits for Libcall functions
-
-The following are a set of changes to ISO/IEC 9899:1999 (aka C99)
-that document the exact semantics of the language extension.
-
-@itemize @bullet
-@item
-@cite{6.5.2.2  Function calls}
-
-Change paragraph 3 to
-
-@quotation
-[...] denotes the called function.  The arguments to the function
-are specified by the implicit argument, if any, followed by the list
-of expressions.
-@end quotation
-
-Add new paragraph before paragraph 4
-
-@quotation
-If the expression that denotes the called function is a structure or union
-member expression as defined in (6.5.2.3) (or such an expression enclosed
-in any number of parentheses expressions), is an lvalue, and has a type
-that includes the attribute @code{libcall}, then the function call has an
-implicit argument.  In other cases there is no implicit argument.  If there
-is an implicit argument, then this will be the first argument to the function,
-and the list of expressions will follow it.  The type of the implicit
-argument is that of a pointer to the structure or union object of which the
-function expression designates a member.  The value of the implicit argument
-is the address of this structure or union object.
-@end quotation
-@end itemize
-
-@item linearvarargs
-@cindex AmigaOS specific function attributes
-On AmigaOS, the @code{linearvarargs} attribute causes all unprototyped
-arguments to a varargs function to be passed on the stack, and not in
-registers as the SVR4 ABI defines.  Please note that @code{libcall} also
-implies @code{linearvarargs}.
-
-@item baserel_restore
-@cindex AmigaOS specific function attributes
-On AmigaOS, when compiling with @option{-mbaserel} causes the compiler
-to create a call to @code{baserel_get_addr} function in the function prologue
-to set up register @code{r2}. The previous contents of register @code{r2}
-are restored in the function epilogue. See @option{-mbaserel} option for
-more details.
-
-@item check68kfuncptr
-@cindex AmigaOS specific function attributes
-On AmigaOS, when calling a function using a function pointer causes
-the compiler to emit additional code to allow for function pointers
-to m68k functions. This is currently available only in the C front end.
-
-The generated code will call @code{__amigaos4_check68k_check} function
-which expects one function pointer argument and returns an integer
-value. If the return value is non-zero, the function pointer will be
-used to perform the function call in the usual way, otherwise
-@code{__amigaos4_check68k_trampoline} function will be called to perform
-the call. The @code{__amigaos4_check68k_check} function should be provided
-by the user and will usually just return the result of
-@code{exec.library} @code{IsNative} call on its argument.
-
-The @code{__amigaos4_check68k_trampoline} function is a @code{linearvarargs}
-function and should also be provided by the user. It will receive at
-least two arguments: the number of arguments to the function pointer and
-the function pointer itself. Additionally, the arguments to the function
-pointer will follow on the stack, each having one zero longword in front
-of it with one final zero longword after all the arguments. This makes it
-possible to create tag pairs and a terminating @code{TAG_DONE} for a
-call to @code{EmulateTags} in @code{exec.library}. The return code of
-@code{__amigaos4_check68k_trampoline} function will be used as a return
-code of the function pointer call.
-
-The following example can be used for functions that have no more than
-13 arguments:
-
-@smallexample
-static const UWORD trampoline_code[][6] =
-@{
-    /* @r{JMP (A5)} */
-    @{0X4ED5, 0, 0, 0, 0, 0@},
-    /* @r{MOVEM.L D0, -(A7); JSR (A5); ADDQ.L #4,A7; RTS} */
-    @{0X48E7, 0X8000, 0X4E95, 0X588F, 0X4E75, 0@},
-    /* @r{MOVEM.L D0-D1, -(A7); JSR (A5); ADDQ.L #8, A7; RTS} */
-    @{0X48E7, 0XC000, 0X4E95, 0X508F, 0X4E75, 0@},
-    /* @r{MOVEM.L D0-D2, -(A7); JSR (A5); ADDA.W #0X000C, A7; RTS} */
-    @{0X48E7, 0XE000, 0X4E95, 0XDEFC, 0X000C, 0X4E75@},
-    /* @r{MOVEM.L D0-D3, -(A7); JSR (A5); ADDA.W #0X0010, A7; RTS} */
-    @{0X48E7, 0XF000, 0X4E95, 0XDEFC, 0X0010, 0X4E75@},
-    /* @r{MOVEM.L D0-D4, -(A7); JSR (A5); ADDA.W #0X0014, A7; RTS} */
-    @{0X48E7, 0XF800, 0X4E95, 0XDEFC, 0X0014, 0X4E75@},
-    /* @r{MOVEM.L D0-D5, -(A7); JSR (A5); ADDA.W #0X0018, A7; RTS} */
-    @{0X48E7, 0XFC00, 0X4E95, 0XDEFC, 0X0018, 0X4E75@},
-    /* @r{MOVEM.L D0-D6, -(A7); JSR (A5); ADDA.W #0X001C, A7; RTS} */
-    @{0X48E7, 0XFE00, 0X4E95, 0XDEFC, 0X001C, 0X4E75@},
-    /* @r{MOVEM.L D0-D7, -(A7); JSR (A5); ADDA.W #0X0020, A7; RTS} */
-    @{0X48E7, 0XFF00, 0X4E95, 0XDEFC, 0X0020, 0X4E75@},
-    /* @r{MOVEM.L D0-D7/A0, -(A7); JSR (A5); ADDA.W #0X0024, A7; RTS} */
-    @{0X48E7, 0XFF80, 0X4E95, 0XDEFC, 0X0024, 0X4E75@},
-    /* @r{MOVEM.L D0-D7/A0-A1, -(A7); JSR (A5); ADDA.W #0X0028, A7; RTS} */
-    @{0X48E7, 0XFFC0, 0X4E95, 0XDEFC, 0X0028, 0X4E75@},
-    /* @r{MOVEM.L D0-D7/A0-A2, -(A7); JSR (A5); ADDA.W #0X002C, A7; RTS} */
-    @{0X48E7, 0XFFE0, 0X4E95, 0XDEFC, 0X002C, 0X4E75@},
-    /* @r{MOVEM.L D0-D7/A0-A3, -(A7); JSR (A5); ADDA.W #0X0030, A7; RTS} */
-    @{0X48E7, 0XFFF0, 0X4E95, 0XDEFC, 0X0030, 0X4E75@},
-    /* @r{MOVEM.L D0-D7/A0-A3, -(A7); JSR (A5); ADDA.W #0X0034, A7; RTS} */
-    @{0X48E7, 0XFFF8, 0X4E95, 0XDEFC, 0X0034, 0X4E75@}
-@};
-
-int VARARGS68K __amigaos4_check68k_trampoline(int num_args,
-                                              int func,
-                                              ...)
-@{
-    int result, i;
-    va_list args;
-    long *stack;
-
-    va_startlinear(args, func);
-    stack = va_getlinearva(args, long *);
-
-    /* @r{Replace 0's with tag id's} */
-    for(i = 0; i < 8 && i < num_args; i++)
-        stack[i * 2] = ET_RegisterD0 + i;
-
-    while(i < num_args)
-    @{
-        stack[i * 2] = ET_RegisterA0 + i - 8;
-        i++;
-    @}
-
-    if (num_args < sizeof(trampoline_code)
-                   / sizeof(trampoline_code[0]))
-        result = IExec->EmulateTags(trampoline_code[num_args],
-                                    ET_SaveRegs, TRUE,
-                                    ET_RegisterA5, func,
-                                    TAG_MORE, stack);
-
-    va_end(args);
-
-    return(result);
-@}
-@end smallexample
-
-@anchor{checktags}
-@item checktags
-@cindex @code{checktags} function attribute
-The @code{checktags} tells the some parameters of the function are
-taglists. In turn it will enable tag-type checking at compile-time, by
-leveraging the extra information provded to enum-defined tags to which
-a @code{tagtype} attribute is associated. The check assumes that if a
-parameter is an integer constant to which a type is associated, then
-it must be followed by an argument of that type. If that is not the
-case, the usual compiling warning about mismatched types will be
-emitted.
-
 @item weak
 @cindex @code{weak} function attribute
 The @code{weak} attribute causes a declaration of an external symbol
 to be emitted as a weak symbol rather than a global.  This is primarily
 useful in defining library functions that can be overridden in user code,
 though it can also be used with non-function declarations.  The overriding
@@ -8237,28 +8073,12 @@ For full documentation of the struct attributes please see the
 documentation in @ref{x86 Variable Attributes}.
 
 @cindex @code{altivec} variable attribute, PowerPC
 For documentation of @code{altivec} attribute please see the
 documentation in @ref{PowerPC Type Attributes}.
 
-@subsection AmigaOS PowerPC Variable Attributes
-
-One attribute is currently defined for AmigaOS PowerPC.
-
-@table @code
-@item force_no_baserel
-@cindex forcing a variable not to be addressed base relative
-
-This attribute forces access to a variable in code compiled with
-@option{-mbaserel} option not to be base relative. If necessary, the
-access should be protected with some sort of arbitration. See
-documentation on @option{-mbaserel} option for more details about this
-attribute.
-
-@end table
-
 @node RL78 Variable Attributes
 @subsection RL78 Variable Attributes
 
 @cindex @code{saddr} variable attribute, RL78
 The RL78 back end supports the @code{saddr} variable attribute.  This
 specifies placement of the corresponding variable in the SADDR area,
@@ -9086,28 +8906,12 @@ is used anywhere in the source file.  This is useful when identifying
 enumerators that are expected to be removed in a future version of a
 program.  The warning also includes the location of the declaration
 of the deprecated enumerator, to enable users to easily find further
 information about why the enumerator is deprecated, or what they should
 do instead.  Note that the warnings only occurs for uses.
 
-@item tagtype
-@cindex @code{tagtype} enumerator attribute
-The @code{tagtype} attribute will associate an additional type to the
-enumerator constant that is leveraged by the compiler for
-@code{checktags}-attributed functions. For example, to define
-@code{WA_CustomScreen} and to teach that it it should be followed by a
-@code{struct Screen *} in that class of functions use:
-
-@smallexample
-enum @{
-  WA_CustomScreen __attribute__((tagtype(struct Screen *)))
-@};
-@end smallexample
-
-For more information, @pxref{checktags}.
-
 @end table
 
 @node Statement Attributes
 @section Statement Attributes
 @cindex Statement Attributes
 
@@ -21780,12 +21584,16 @@ AMD Family 17h Zen version 2.
 
 @item amdfam19h
 AMD Family 19h CPU.
 
 @item znver3
 AMD Family 19h Zen version 3.
+
+@item znver4
+AMD Family 19h Zen version 4.
+
 @end table
 
 Here is an example:
 @smallexample
 if (__builtin_cpu_is ("corei7"))
   @{
-- 
2.45.2

